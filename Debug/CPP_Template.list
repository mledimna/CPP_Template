
CPP_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e04  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001f40  08001f40  00011f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f68  08001f68  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08001f68  08001f68  00011f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f70  08001f70  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f70  08001f70  00011f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f74  08001f74  00011f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08001fe0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08001fe0  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000326d  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000108f  00000000  00000000  00023341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000490  00000000  00000000  000243d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000033e  00000000  00000000  00024860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ed9  00000000  00000000  00024b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005f3b  00000000  00000000  0003ca77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083eef  00000000  00000000  000429b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001698  00000000  00000000  000c68a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c7f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000068 	.word	0x20000068
 8000158:	00000000 	.word	0x00000000
 800015c:	08001f28 	.word	0x08001f28

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000006c 	.word	0x2000006c
 8000178:	08001f28 	.word	0x08001f28

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <_ZN4TOTOC1Ev>:
#ifdef __cplusplus
// ICI se trouve le code C++

class TOTO{
public:
	TOTO(){
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
		printf("Bonjour\r\n");
 8000484:	4803      	ldr	r0, [pc, #12]	; (8000494 <_ZN4TOTOC1Ev+0x18>)
 8000486:	f001 f9c1 	bl	800180c <puts>
	}
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4618      	mov	r0, r3
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	08001f40 	.word	0x08001f40

08000498 <main_cpp>:
 *      Author: mathi
 */

#include "main.hpp"

void main_cpp(void){
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
	TOTO toto;
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ffeb 	bl	800047c <_ZN4TOTOC1Ev>
	for(;;){
 80004a6:	e7fe      	b.n	80004a6 <main_cpp+0xe>

080004a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004b8:	f003 0301 	and.w	r3, r3, #1
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d013      	beq.n	80004e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d00b      	beq.n	80004e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004d0:	e000      	b.n	80004d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0f9      	beq.n	80004d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	b2d2      	uxtb	r2, r2
 80004e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004e8:	687b      	ldr	r3, [r7, #4]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	return ITM_SendChar(ch);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ffd2 	bl	80004a8 <ITM_SendChar>
 8000504:	4603      	mov	r3, r0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 f990 	bl	8000836 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f805 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f851 	bl	80005c0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  main_cpp();
 800051e:	f7ff ffbb 	bl	8000498 <main_cpp>

  while (1)
 8000522:	e7fe      	b.n	8000522 <main+0x14>

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b092      	sub	sp, #72	; 0x48
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	2234      	movs	r2, #52	; 0x34
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f001 fa4a 	bl	80019cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	463b      	mov	r3, r7
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000546:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <SystemClock_Config+0x98>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800054e:	4a1b      	ldr	r2, [pc, #108]	; (80005bc <SystemClock_Config+0x98>)
 8000550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000554:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055e:	2310      	movs	r3, #16
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000566:	2300      	movs	r3, #0
 8000568:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800056a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000570:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4618      	mov	r0, r3
 800057c:	f000 faae 	bl	8000adc <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000586:	f000 f831 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2303      	movs	r3, #3
 8000590:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059e:	463b      	mov	r3, r7
 80005a0:	2101      	movs	r1, #1
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fdca 	bl	800113c <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ae:	f000 f81d 	bl	80005ec <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3748      	adds	r7, #72	; 0x48
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <MX_GPIO_Init+0x28>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <MX_GPIO_Init+0x28>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <MX_GPIO_Init+0x28>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	40023800 	.word	0x40023800

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <Error_Handler+0x8>
	...

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <HAL_MspInit+0x58>)
 8000600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <HAL_MspInit+0x58>)
 8000604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000608:	6253      	str	r3, [r2, #36]	; 0x24
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <HAL_MspInit+0x58>)
 800060c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <HAL_MspInit+0x58>)
 8000618:	6a1b      	ldr	r3, [r3, #32]
 800061a:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <HAL_MspInit+0x58>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6213      	str	r3, [r2, #32]
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <HAL_MspInit+0x58>)
 8000624:	6a1b      	ldr	r3, [r3, #32]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <HAL_MspInit+0x58>)
 8000630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000632:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_MspInit+0x58>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	6253      	str	r3, [r2, #36]	; 0x24
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <HAL_MspInit+0x58>)
 800063c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40023800 	.word	0x40023800

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <MemManage_Handler+0x4>

08000666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <UsageFault_Handler+0x4>

08000672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069a:	f000 f91f 	bl	80008dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b086      	sub	sp, #24
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e00a      	b.n	80006ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006b4:	f3af 8000 	nop.w
 80006b8:	4601      	mov	r1, r0
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	60ba      	str	r2, [r7, #8]
 80006c0:	b2ca      	uxtb	r2, r1
 80006c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	3301      	adds	r3, #1
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	dbf0      	blt.n	80006b4 <_read+0x12>
  }

  return len;
 80006d2:	687b      	ldr	r3, [r7, #4]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	e009      	b.n	8000702 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	60ba      	str	r2, [r7, #8]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fefc 	bl	80004f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	3301      	adds	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	429a      	cmp	r2, r3
 8000708:	dbf1      	blt.n	80006ee <_write+0x12>
  }
  return len;
 800070a:	687b      	ldr	r3, [r7, #4]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <_close>:

int _close(int file)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800071c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800073a:	605a      	str	r2, [r3, #4]
  return 0;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <_isatty>:

int _isatty(int file)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000750:	2301      	movs	r3, #1
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800077c:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <_sbrk+0x5c>)
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <_sbrk+0x60>)
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <_sbrk+0x64>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <_sbrk+0x64>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <_sbrk+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d207      	bcs.n	80007b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a4:	f001 f960 	bl	8001a68 <__errno>
 80007a8:	4603      	mov	r3, r0
 80007aa:	220c      	movs	r2, #12
 80007ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	e009      	b.n	80007c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <_sbrk+0x64>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <_sbrk+0x64>)
 80007c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007c6:	68fb      	ldr	r3, [r7, #12]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20014000 	.word	0x20014000
 80007d4:	00000400 	.word	0x00000400
 80007d8:	20000084 	.word	0x20000084
 80007dc:	200001d8 	.word	0x200001d8

080007e0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80007ec:	f7ff fff8 	bl	80007e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007f2:	490c      	ldr	r1, [pc, #48]	; (8000824 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a09      	ldr	r2, [pc, #36]	; (800082c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000808:	4c09      	ldr	r4, [pc, #36]	; (8000830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000816:	f001 f92d 	bl	8001a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff fe78 	bl	800050e <main>
  bx lr
 800081e:	4770      	bx	lr
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000828:	08001f78 	.word	0x08001f78
  ldr r2, =_sbss
 800082c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000830:	200001d8 	.word	0x200001d8

08000834 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_IRQHandler>

08000836 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800083c:	2300      	movs	r3, #0
 800083e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 f917 	bl	8000a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000846:	200f      	movs	r0, #15
 8000848:	f000 f80e 	bl	8000868 <HAL_InitTick>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d002      	beq.n	8000858 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	71fb      	strb	r3, [r7, #7]
 8000856:	e001      	b.n	800085c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000858:	f7ff fece 	bl	80005f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800085c:	79fb      	ldrb	r3, [r7, #7]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000870:	2300      	movs	r3, #0
 8000872:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <HAL_InitTick+0x68>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d022      	beq.n	80008c2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <HAL_InitTick+0x6c>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_InitTick+0x68>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000888:	fbb1 f3f3 	udiv	r3, r1, r3
 800088c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f000 f916 	bl	8000ac2 <HAL_SYSTICK_Config>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10f      	bne.n	80008bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b0f      	cmp	r3, #15
 80008a0:	d809      	bhi.n	80008b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a2:	2200      	movs	r2, #0
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	f04f 30ff 	mov.w	r0, #4294967295
 80008aa:	f000 f8ee 	bl	8000a8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <HAL_InitTick+0x70>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	e007      	b.n	80008c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	e004      	b.n	80008c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
 80008be:	73fb      	strb	r3, [r7, #15]
 80008c0:	e001      	b.n	80008c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000004 	.word	0x20000004

080008dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_IncTick+0x1c>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_IncTick+0x20>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a03      	ldr	r2, [pc, #12]	; (80008f8 <HAL_IncTick+0x1c>)
 80008ec:	6013      	str	r3, [r2, #0]
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000088 	.word	0x20000088
 80008fc:	20000008 	.word	0x20000008

08000900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;
 8000904:	4b02      	ldr	r3, [pc, #8]	; (8000910 <HAL_GetTick+0x10>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	20000088 	.word	0x20000088

08000914 <__NVIC_SetPriorityGrouping>:
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000930:	4013      	ands	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800093c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000946:	4a04      	ldr	r2, [pc, #16]	; (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	60d3      	str	r3, [r2, #12]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_GetPriorityGrouping>:
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <__NVIC_GetPriorityGrouping+0x18>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	f003 0307 	and.w	r3, r3, #7
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_SetPriority>:
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	2b00      	cmp	r3, #0
 800098a:	db0a      	blt.n	80009a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	490c      	ldr	r1, [pc, #48]	; (80009c4 <__NVIC_SetPriority+0x4c>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	440b      	add	r3, r1
 800099c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80009a0:	e00a      	b.n	80009b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4908      	ldr	r1, [pc, #32]	; (80009c8 <__NVIC_SetPriority+0x50>)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	3b04      	subs	r3, #4
 80009b0:	0112      	lsls	r2, r2, #4
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	440b      	add	r3, r1
 80009b6:	761a      	strb	r2, [r3, #24]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <NVIC_EncodePriority>:
{
 80009cc:	b480      	push	{r7}
 80009ce:	b089      	sub	sp, #36	; 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f1c3 0307 	rsb	r3, r3, #7
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	bf28      	it	cs
 80009ea:	2304      	movcs	r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3304      	adds	r3, #4
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	d902      	bls.n	80009fc <NVIC_EncodePriority+0x30>
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3b03      	subs	r3, #3
 80009fa:	e000      	b.n	80009fe <NVIC_EncodePriority+0x32>
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43da      	mvns	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	43d9      	mvns	r1, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	4313      	orrs	r3, r2
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3724      	adds	r7, #36	; 0x24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Config>:
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a40:	d301      	bcc.n	8000a46 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00f      	b.n	8000a66 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <SysTick_Config+0x40>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4e:	210f      	movs	r1, #15
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f7ff ff90 	bl	8000978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <SysTick_Config+0x40>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <SysTick_Config+0x40>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff49 	bl	8000914 <__NVIC_SetPriorityGrouping>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a9c:	f7ff ff5e 	bl	800095c <__NVIC_GetPriorityGrouping>
 8000aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	68b9      	ldr	r1, [r7, #8]
 8000aa6:	6978      	ldr	r0, [r7, #20]
 8000aa8:	f7ff ff90 	bl	80009cc <NVIC_EncodePriority>
 8000aac:	4602      	mov	r2, r0
 8000aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff5f 	bl	8000978 <__NVIC_SetPriority>
}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ffb0 	bl	8000a30 <SysTick_Config>
 8000ad0:	4603      	mov	r3, r0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d101      	bne.n	8000aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e31d      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000aee:	4b94      	ldr	r3, [pc, #592]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f003 030c 	and.w	r3, r3, #12
 8000af6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000af8:	4b91      	ldr	r3, [pc, #580]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b00:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d07b      	beq.n	8000c06 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	2b08      	cmp	r3, #8
 8000b12:	d006      	beq.n	8000b22 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	2b0c      	cmp	r3, #12
 8000b18:	d10f      	bne.n	8000b3a <HAL_RCC_OscConfig+0x5e>
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b20:	d10b      	bne.n	8000b3a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b22:	4b87      	ldr	r3, [pc, #540]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d06a      	beq.n	8000c04 <HAL_RCC_OscConfig+0x128>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d166      	bne.n	8000c04 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e2f7      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d106      	bne.n	8000b50 <HAL_RCC_OscConfig+0x74>
 8000b42:	4b7f      	ldr	r3, [pc, #508]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a7e      	ldr	r2, [pc, #504]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e02d      	b.n	8000bac <HAL_RCC_OscConfig+0xd0>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d10c      	bne.n	8000b72 <HAL_RCC_OscConfig+0x96>
 8000b58:	4b79      	ldr	r3, [pc, #484]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a78      	ldr	r2, [pc, #480]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	4b76      	ldr	r3, [pc, #472]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a75      	ldr	r2, [pc, #468]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	e01c      	b.n	8000bac <HAL_RCC_OscConfig+0xd0>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	2b05      	cmp	r3, #5
 8000b78:	d10c      	bne.n	8000b94 <HAL_RCC_OscConfig+0xb8>
 8000b7a:	4b71      	ldr	r3, [pc, #452]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a70      	ldr	r2, [pc, #448]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	4b6e      	ldr	r3, [pc, #440]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a6d      	ldr	r2, [pc, #436]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	e00b      	b.n	8000bac <HAL_RCC_OscConfig+0xd0>
 8000b94:	4b6a      	ldr	r3, [pc, #424]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a69      	ldr	r2, [pc, #420]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	4b67      	ldr	r3, [pc, #412]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a66      	ldr	r2, [pc, #408]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d013      	beq.n	8000bdc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb4:	f7ff fea4 	bl	8000900 <HAL_GetTick>
 8000bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bba:	e008      	b.n	8000bce <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bbc:	f7ff fea0 	bl	8000900 <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b64      	cmp	r3, #100	; 0x64
 8000bc8:	d901      	bls.n	8000bce <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e2ad      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bce:	4b5c      	ldr	r3, [pc, #368]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0f0      	beq.n	8000bbc <HAL_RCC_OscConfig+0xe0>
 8000bda:	e014      	b.n	8000c06 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bdc:	f7ff fe90 	bl	8000900 <HAL_GetTick>
 8000be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000be2:	e008      	b.n	8000bf6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be4:	f7ff fe8c 	bl	8000900 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b64      	cmp	r3, #100	; 0x64
 8000bf0:	d901      	bls.n	8000bf6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e299      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000bf6:	4b52      	ldr	r3, [pc, #328]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f0      	bne.n	8000be4 <HAL_RCC_OscConfig+0x108>
 8000c02:	e000      	b.n	8000c06 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d05a      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	2b04      	cmp	r3, #4
 8000c16:	d005      	beq.n	8000c24 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	2b0c      	cmp	r3, #12
 8000c1c:	d119      	bne.n	8000c52 <HAL_RCC_OscConfig+0x176>
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d116      	bne.n	8000c52 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c24:	4b46      	ldr	r3, [pc, #280]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d005      	beq.n	8000c3c <HAL_RCC_OscConfig+0x160>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d001      	beq.n	8000c3c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e276      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c3c:	4b40      	ldr	r3, [pc, #256]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	021b      	lsls	r3, r3, #8
 8000c4a:	493d      	ldr	r1, [pc, #244]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c50:	e03a      	b.n	8000cc8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d020      	beq.n	8000c9c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c5a:	4b3a      	ldr	r3, [pc, #232]	; (8000d44 <HAL_RCC_OscConfig+0x268>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fe4e 	bl	8000900 <HAL_GetTick>
 8000c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c68:	f7ff fe4a 	bl	8000900 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e257      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c7a:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0f0      	beq.n	8000c68 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c86:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	021b      	lsls	r3, r3, #8
 8000c94:	492a      	ldr	r1, [pc, #168]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000c96:	4313      	orrs	r3, r2
 8000c98:	604b      	str	r3, [r1, #4]
 8000c9a:	e015      	b.n	8000cc8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_RCC_OscConfig+0x268>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca2:	f7ff fe2d 	bl	8000900 <HAL_GetTick>
 8000ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000ca8:	e008      	b.n	8000cbc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000caa:	f7ff fe29 	bl	8000900 <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e236      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cbc:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1f0      	bne.n	8000caa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 80b8 	beq.w	8000e46 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d170      	bne.n	8000dbe <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x218>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e21a      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a1a      	ldr	r2, [r3, #32]
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d921      	bls.n	8000d48 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fc09 	bl	8001520 <RCC_SetFlashLatencyFromMSIRange>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e208      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	4906      	ldr	r1, [pc, #24]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000d26:	4313      	orrs	r3, r2
 8000d28:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	061b      	lsls	r3, r3, #24
 8000d38:	4901      	ldr	r1, [pc, #4]	; (8000d40 <HAL_RCC_OscConfig+0x264>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	604b      	str	r3, [r1, #4]
 8000d3e:	e020      	b.n	8000d82 <HAL_RCC_OscConfig+0x2a6>
 8000d40:	40023800 	.word	0x40023800
 8000d44:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d48:	4b99      	ldr	r3, [pc, #612]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a1b      	ldr	r3, [r3, #32]
 8000d54:	4996      	ldr	r1, [pc, #600]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d5a:	4b95      	ldr	r3, [pc, #596]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	061b      	lsls	r3, r3, #24
 8000d68:	4991      	ldr	r1, [pc, #580]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fbd4 	bl	8001520 <RCC_SetFlashLatencyFromMSIRange>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e1d3      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	0b5b      	lsrs	r3, r3, #13
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d92:	4a87      	ldr	r2, [pc, #540]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000d94:	6892      	ldr	r2, [r2, #8]
 8000d96:	0912      	lsrs	r2, r2, #4
 8000d98:	f002 020f 	and.w	r2, r2, #15
 8000d9c:	4985      	ldr	r1, [pc, #532]	; (8000fb4 <HAL_RCC_OscConfig+0x4d8>)
 8000d9e:	5c8a      	ldrb	r2, [r1, r2]
 8000da0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000da2:	4a85      	ldr	r2, [pc, #532]	; (8000fb8 <HAL_RCC_OscConfig+0x4dc>)
 8000da4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000da6:	4b85      	ldr	r3, [pc, #532]	; (8000fbc <HAL_RCC_OscConfig+0x4e0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fd5c 	bl	8000868 <HAL_InitTick>
 8000db0:	4603      	mov	r3, r0
 8000db2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d045      	beq.n	8000e46 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	e1b5      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d029      	beq.n	8000e1a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dc6:	4b7e      	ldr	r3, [pc, #504]	; (8000fc0 <HAL_RCC_OscConfig+0x4e4>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fd98 	bl	8000900 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fd94 	bl	8000900 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e1a1      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000de6:	4b72      	ldr	r3, [pc, #456]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f0      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000df2:	4b6f      	ldr	r3, [pc, #444]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a1b      	ldr	r3, [r3, #32]
 8000dfe:	496c      	ldr	r1, [pc, #432]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000e00:	4313      	orrs	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e04:	4b6a      	ldr	r3, [pc, #424]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	061b      	lsls	r3, r3, #24
 8000e12:	4967      	ldr	r1, [pc, #412]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000e14:	4313      	orrs	r3, r2
 8000e16:	604b      	str	r3, [r1, #4]
 8000e18:	e015      	b.n	8000e46 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e1a:	4b69      	ldr	r3, [pc, #420]	; (8000fc0 <HAL_RCC_OscConfig+0x4e4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fd6e 	bl	8000900 <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e28:	f7ff fd6a 	bl	8000900 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e177      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e3a:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f0      	bne.n	8000e28 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d030      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d016      	beq.n	8000e88 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e5a:	4b5a      	ldr	r3, [pc, #360]	; (8000fc4 <HAL_RCC_OscConfig+0x4e8>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e60:	f7ff fd4e 	bl	8000900 <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e68:	f7ff fd4a 	bl	8000900 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e157      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e7a:	4b4d      	ldr	r3, [pc, #308]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0f0      	beq.n	8000e68 <HAL_RCC_OscConfig+0x38c>
 8000e86:	e015      	b.n	8000eb4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e88:	4b4e      	ldr	r3, [pc, #312]	; (8000fc4 <HAL_RCC_OscConfig+0x4e8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fd37 	bl	8000900 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e96:	f7ff fd33 	bl	8000900 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e140      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ea8:	4b41      	ldr	r3, [pc, #260]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f0      	bne.n	8000e96 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80b5 	beq.w	800102c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ec6:	4b3a      	ldr	r3, [pc, #232]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10d      	bne.n	8000eee <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b37      	ldr	r3, [pc, #220]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed6:	4a36      	ldr	r2, [pc, #216]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	6253      	str	r3, [r2, #36]	; 0x24
 8000ede:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eea:	2301      	movs	r3, #1
 8000eec:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eee:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <HAL_RCC_OscConfig+0x4ec>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d118      	bne.n	8000f2c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <HAL_RCC_OscConfig+0x4ec>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a32      	ldr	r2, [pc, #200]	; (8000fc8 <HAL_RCC_OscConfig+0x4ec>)
 8000f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f06:	f7ff fcfb 	bl	8000900 <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f0e:	f7ff fcf7 	bl	8000900 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b64      	cmp	r3, #100	; 0x64
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e104      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <HAL_RCC_OscConfig+0x4ec>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0f0      	beq.n	8000f0e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d106      	bne.n	8000f42 <HAL_RCC_OscConfig+0x466>
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f38:	4a1d      	ldr	r2, [pc, #116]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3e:	6353      	str	r3, [r2, #52]	; 0x34
 8000f40:	e02d      	b.n	8000f9e <HAL_RCC_OscConfig+0x4c2>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10c      	bne.n	8000f64 <HAL_RCC_OscConfig+0x488>
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f4e:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f54:	6353      	str	r3, [r2, #52]	; 0x34
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f60:	6353      	str	r3, [r2, #52]	; 0x34
 8000f62:	e01c      	b.n	8000f9e <HAL_RCC_OscConfig+0x4c2>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d10c      	bne.n	8000f86 <HAL_RCC_OscConfig+0x4aa>
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f70:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f76:	6353      	str	r3, [r2, #52]	; 0x34
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f82:	6353      	str	r3, [r2, #52]	; 0x34
 8000f84:	e00b      	b.n	8000f9e <HAL_RCC_OscConfig+0x4c2>
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8a:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f90:	6353      	str	r3, [r2, #52]	; 0x34
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f96:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_RCC_OscConfig+0x4d4>)
 8000f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f9c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d024      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fcab 	bl	8000900 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fac:	e019      	b.n	8000fe2 <HAL_RCC_OscConfig+0x506>
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	08001f58 	.word	0x08001f58
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000004 	.word	0x20000004
 8000fc0:	42470020 	.word	0x42470020
 8000fc4:	42470680 	.word	0x42470680
 8000fc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fc98 	bl	8000900 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e0a3      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fe2:	4b54      	ldr	r3, [pc, #336]	; (8001134 <HAL_RCC_OscConfig+0x658>)
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0ee      	beq.n	8000fcc <HAL_RCC_OscConfig+0x4f0>
 8000fee:	e014      	b.n	800101a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff0:	f7ff fc86 	bl	8000900 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000ff6:	e00a      	b.n	800100e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fc82 	bl	8000900 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	f241 3288 	movw	r2, #5000	; 0x1388
 8001006:	4293      	cmp	r3, r2
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e08d      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800100e:	4b49      	ldr	r3, [pc, #292]	; (8001134 <HAL_RCC_OscConfig+0x658>)
 8001010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1ee      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800101a:	7ffb      	ldrb	r3, [r7, #31]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d105      	bne.n	800102c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001020:	4b44      	ldr	r3, [pc, #272]	; (8001134 <HAL_RCC_OscConfig+0x658>)
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	4a43      	ldr	r2, [pc, #268]	; (8001134 <HAL_RCC_OscConfig+0x658>)
 8001026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800102a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001030:	2b00      	cmp	r3, #0
 8001032:	d079      	beq.n	8001128 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2b0c      	cmp	r3, #12
 8001038:	d056      	beq.n	80010e8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	2b02      	cmp	r3, #2
 8001040:	d13b      	bne.n	80010ba <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001042:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <HAL_RCC_OscConfig+0x65c>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fc5a 	bl	8000900 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001050:	f7ff fc56 	bl	8000900 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e063      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001062:	4b34      	ldr	r3, [pc, #208]	; (8001134 <HAL_RCC_OscConfig+0x658>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800106e:	4b31      	ldr	r3, [pc, #196]	; (8001134 <HAL_RCC_OscConfig+0x658>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107e:	4319      	orrs	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	430b      	orrs	r3, r1
 8001086:	492b      	ldr	r1, [pc, #172]	; (8001134 <HAL_RCC_OscConfig+0x658>)
 8001088:	4313      	orrs	r3, r2
 800108a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <HAL_RCC_OscConfig+0x65c>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fc35 	bl	8000900 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800109a:	f7ff fc31 	bl	8000900 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e03e      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <HAL_RCC_OscConfig+0x658>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x5be>
 80010b8:	e036      	b.n	8001128 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <HAL_RCC_OscConfig+0x65c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fc1e 	bl	8000900 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c8:	f7ff fc1a 	bl	8000900 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e027      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_RCC_OscConfig+0x658>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x5ec>
 80010e6:	e01f      	b.n	8001128 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e01a      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_RCC_OscConfig+0x658>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001104:	429a      	cmp	r2, r3
 8001106:	d10d      	bne.n	8001124 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001112:	429a      	cmp	r2, r3
 8001114:	d106      	bne.n	8001124 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001120:	429a      	cmp	r2, r3
 8001122:	d001      	beq.n	8001128 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	42470060 	.word	0x42470060

0800113c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e11a      	b.n	8001386 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001150:	4b8f      	ldr	r3, [pc, #572]	; (8001390 <HAL_RCC_ClockConfig+0x254>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d919      	bls.n	8001192 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d105      	bne.n	8001170 <HAL_RCC_ClockConfig+0x34>
 8001164:	4b8a      	ldr	r3, [pc, #552]	; (8001390 <HAL_RCC_ClockConfig+0x254>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a89      	ldr	r2, [pc, #548]	; (8001390 <HAL_RCC_ClockConfig+0x254>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b87      	ldr	r3, [pc, #540]	; (8001390 <HAL_RCC_ClockConfig+0x254>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f023 0201 	bic.w	r2, r3, #1
 8001178:	4985      	ldr	r1, [pc, #532]	; (8001390 <HAL_RCC_ClockConfig+0x254>)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	4313      	orrs	r3, r2
 800117e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001180:	4b83      	ldr	r3, [pc, #524]	; (8001390 <HAL_RCC_ClockConfig+0x254>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d001      	beq.n	8001192 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e0f9      	b.n	8001386 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d008      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800119e:	4b7d      	ldr	r3, [pc, #500]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	497a      	ldr	r1, [pc, #488]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 808e 	beq.w	80012da <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d107      	bne.n	80011d6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011c6:	4b73      	ldr	r3, [pc, #460]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d121      	bne.n	8001216 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e0d7      	b.n	8001386 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d107      	bne.n	80011ee <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80011de:	4b6d      	ldr	r3, [pc, #436]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d115      	bne.n	8001216 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0cb      	b.n	8001386 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011f6:	4b67      	ldr	r3, [pc, #412]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e0bf      	b.n	8001386 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001206:	4b63      	ldr	r3, [pc, #396]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e0b7      	b.n	8001386 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001216:	4b5f      	ldr	r3, [pc, #380]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f023 0203 	bic.w	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	495c      	ldr	r1, [pc, #368]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 8001224:	4313      	orrs	r3, r2
 8001226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001228:	f7ff fb6a 	bl	8000900 <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d112      	bne.n	800125c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001236:	e00a      	b.n	800124e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001238:	f7ff fb62 	bl	8000900 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	f241 3288 	movw	r2, #5000	; 0x1388
 8001246:	4293      	cmp	r3, r2
 8001248:	d901      	bls.n	800124e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e09b      	b.n	8001386 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800124e:	4b51      	ldr	r3, [pc, #324]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b08      	cmp	r3, #8
 8001258:	d1ee      	bne.n	8001238 <HAL_RCC_ClockConfig+0xfc>
 800125a:	e03e      	b.n	80012da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d112      	bne.n	800128a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001264:	e00a      	b.n	800127c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001266:	f7ff fb4b 	bl	8000900 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	f241 3288 	movw	r2, #5000	; 0x1388
 8001274:	4293      	cmp	r3, r2
 8001276:	d901      	bls.n	800127c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e084      	b.n	8001386 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800127c:	4b45      	ldr	r3, [pc, #276]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	2b0c      	cmp	r3, #12
 8001286:	d1ee      	bne.n	8001266 <HAL_RCC_ClockConfig+0x12a>
 8001288:	e027      	b.n	80012da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d11d      	bne.n	80012ce <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001292:	e00a      	b.n	80012aa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001294:	f7ff fb34 	bl	8000900 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e06d      	b.n	8001386 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012aa:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d1ee      	bne.n	8001294 <HAL_RCC_ClockConfig+0x158>
 80012b6:	e010      	b.n	80012da <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b8:	f7ff fb22 	bl	8000900 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e05b      	b.n	8001386 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80012ce:	4b31      	ldr	r3, [pc, #196]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ee      	bne.n	80012b8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_RCC_ClockConfig+0x254>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d219      	bcs.n	800131c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <HAL_RCC_ClockConfig+0x1be>
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HAL_RCC_ClockConfig+0x254>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a27      	ldr	r2, [pc, #156]	; (8001390 <HAL_RCC_ClockConfig+0x254>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <HAL_RCC_ClockConfig+0x254>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 0201 	bic.w	r2, r3, #1
 8001302:	4923      	ldr	r1, [pc, #140]	; (8001390 <HAL_RCC_ClockConfig+0x254>)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800130a:	4b21      	ldr	r3, [pc, #132]	; (8001390 <HAL_RCC_ClockConfig+0x254>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e034      	b.n	8001386 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4917      	ldr	r1, [pc, #92]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 8001336:	4313      	orrs	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d009      	beq.n	800135a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	490f      	ldr	r1, [pc, #60]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 8001356:	4313      	orrs	r3, r2
 8001358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800135a:	f000 f823 	bl	80013a4 <HAL_RCC_GetSysClockFreq>
 800135e:	4602      	mov	r2, r0
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_RCC_ClockConfig+0x258>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	490b      	ldr	r1, [pc, #44]	; (8001398 <HAL_RCC_ClockConfig+0x25c>)
 800136c:	5ccb      	ldrb	r3, [r1, r3]
 800136e:	fa22 f303 	lsr.w	r3, r2, r3
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <HAL_RCC_ClockConfig+0x260>)
 8001374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_RCC_ClockConfig+0x264>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fa74 	bl	8000868 <HAL_InitTick>
 8001380:	4603      	mov	r3, r0
 8001382:	72fb      	strb	r3, [r7, #11]

  return status;
 8001384:	7afb      	ldrb	r3, [r7, #11]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023c00 	.word	0x40023c00
 8001394:	40023800 	.word	0x40023800
 8001398:	08001f58 	.word	0x08001f58
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000004 	.word	0x20000004

080013a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a8:	b08e      	sub	sp, #56	; 0x38
 80013aa:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80013ac:	4b58      	ldr	r3, [pc, #352]	; (8001510 <HAL_RCC_GetSysClockFreq+0x16c>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	f003 030c 	and.w	r3, r3, #12
 80013b8:	2b0c      	cmp	r3, #12
 80013ba:	d00d      	beq.n	80013d8 <HAL_RCC_GetSysClockFreq+0x34>
 80013bc:	2b0c      	cmp	r3, #12
 80013be:	f200 8092 	bhi.w	80014e6 <HAL_RCC_GetSysClockFreq+0x142>
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d002      	beq.n	80013cc <HAL_RCC_GetSysClockFreq+0x28>
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d003      	beq.n	80013d2 <HAL_RCC_GetSysClockFreq+0x2e>
 80013ca:	e08c      	b.n	80014e6 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013cc:	4b51      	ldr	r3, [pc, #324]	; (8001514 <HAL_RCC_GetSysClockFreq+0x170>)
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013d0:	e097      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013d2:	4b51      	ldr	r3, [pc, #324]	; (8001518 <HAL_RCC_GetSysClockFreq+0x174>)
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013d6:	e094      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80013d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013da:	0c9b      	lsrs	r3, r3, #18
 80013dc:	f003 020f 	and.w	r2, r3, #15
 80013e0:	4b4e      	ldr	r3, [pc, #312]	; (800151c <HAL_RCC_GetSysClockFreq+0x178>)
 80013e2:	5c9b      	ldrb	r3, [r3, r2]
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	0d9b      	lsrs	r3, r3, #22
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	3301      	adds	r3, #1
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <HAL_RCC_GetSysClockFreq+0x16c>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d021      	beq.n	8001442 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80013fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001400:	2200      	movs	r2, #0
 8001402:	61bb      	str	r3, [r7, #24]
 8001404:	61fa      	str	r2, [r7, #28]
 8001406:	4b44      	ldr	r3, [pc, #272]	; (8001518 <HAL_RCC_GetSysClockFreq+0x174>)
 8001408:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800140c:	464a      	mov	r2, r9
 800140e:	fb03 f202 	mul.w	r2, r3, r2
 8001412:	2300      	movs	r3, #0
 8001414:	4644      	mov	r4, r8
 8001416:	fb04 f303 	mul.w	r3, r4, r3
 800141a:	4413      	add	r3, r2
 800141c:	4a3e      	ldr	r2, [pc, #248]	; (8001518 <HAL_RCC_GetSysClockFreq+0x174>)
 800141e:	4644      	mov	r4, r8
 8001420:	fba4 0102 	umull	r0, r1, r4, r2
 8001424:	440b      	add	r3, r1
 8001426:	4619      	mov	r1, r3
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	2200      	movs	r2, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	617a      	str	r2, [r7, #20]
 8001430:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001434:	f7fe fea2 	bl	800017c <__aeabi_uldivmod>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4613      	mov	r3, r2
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
 8001440:	e04e      	b.n	80014e0 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001444:	2200      	movs	r2, #0
 8001446:	469a      	mov	sl, r3
 8001448:	4693      	mov	fp, r2
 800144a:	4652      	mov	r2, sl
 800144c:	465b      	mov	r3, fp
 800144e:	f04f 0000 	mov.w	r0, #0
 8001452:	f04f 0100 	mov.w	r1, #0
 8001456:	0159      	lsls	r1, r3, #5
 8001458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800145c:	0150      	lsls	r0, r2, #5
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	ebb2 080a 	subs.w	r8, r2, sl
 8001466:	eb63 090b 	sbc.w	r9, r3, fp
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001476:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800147a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800147e:	ebb2 0408 	subs.w	r4, r2, r8
 8001482:	eb63 0509 	sbc.w	r5, r3, r9
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	00eb      	lsls	r3, r5, #3
 8001490:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001494:	00e2      	lsls	r2, r4, #3
 8001496:	4614      	mov	r4, r2
 8001498:	461d      	mov	r5, r3
 800149a:	eb14 030a 	adds.w	r3, r4, sl
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	eb45 030b 	adc.w	r3, r5, fp
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014b2:	4629      	mov	r1, r5
 80014b4:	028b      	lsls	r3, r1, #10
 80014b6:	4620      	mov	r0, r4
 80014b8:	4629      	mov	r1, r5
 80014ba:	4604      	mov	r4, r0
 80014bc:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80014c0:	4601      	mov	r1, r0
 80014c2:	028a      	lsls	r2, r1, #10
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	2200      	movs	r2, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	60fa      	str	r2, [r7, #12]
 80014d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014d4:	f7fe fe52 	bl	800017c <__aeabi_uldivmod>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4613      	mov	r3, r2
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 80014e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014e4:	e00d      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_RCC_GetSysClockFreq+0x16c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	0b5b      	lsrs	r3, r3, #13
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	3301      	adds	r3, #1
 80014f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001504:	4618      	mov	r0, r3
 8001506:	3738      	adds	r7, #56	; 0x38
 8001508:	46bd      	mov	sp, r7
 800150a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	00f42400 	.word	0x00f42400
 8001518:	016e3600 	.word	0x016e3600
 800151c:	08001f4c 	.word	0x08001f4c

08001520 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001520:	b480      	push	{r7}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800152c:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d12c      	bne.n	8001592 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	e016      	b.n	800157e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	4a1f      	ldr	r2, [pc, #124]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155a:	6253      	str	r3, [r2, #36]	; 0x24
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001570:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800157c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001584:	d105      	bne.n	8001592 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800158c:	d101      	bne.n	8001592 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800158e:	2301      	movs	r3, #1
 8001590:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d105      	bne.n	80015a4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 0201 	bic.w	r2, r3, #1
 80015ac:	490b      	ldr	r1, [pc, #44]	; (80015dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d001      	beq.n	80015c6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40007000 	.word	0x40007000
 80015dc:	40023c00 	.word	0x40023c00

080015e0 <std>:
 80015e0:	2300      	movs	r3, #0
 80015e2:	b510      	push	{r4, lr}
 80015e4:	4604      	mov	r4, r0
 80015e6:	e9c0 3300 	strd	r3, r3, [r0]
 80015ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80015ee:	6083      	str	r3, [r0, #8]
 80015f0:	8181      	strh	r1, [r0, #12]
 80015f2:	6643      	str	r3, [r0, #100]	; 0x64
 80015f4:	81c2      	strh	r2, [r0, #14]
 80015f6:	6183      	str	r3, [r0, #24]
 80015f8:	4619      	mov	r1, r3
 80015fa:	2208      	movs	r2, #8
 80015fc:	305c      	adds	r0, #92	; 0x5c
 80015fe:	f000 f9e5 	bl	80019cc <memset>
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <std+0x58>)
 8001604:	6224      	str	r4, [r4, #32]
 8001606:	6263      	str	r3, [r4, #36]	; 0x24
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <std+0x5c>)
 800160a:	62a3      	str	r3, [r4, #40]	; 0x28
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <std+0x60>)
 800160e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <std+0x64>)
 8001612:	6323      	str	r3, [r4, #48]	; 0x30
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <std+0x68>)
 8001616:	429c      	cmp	r4, r3
 8001618:	d006      	beq.n	8001628 <std+0x48>
 800161a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800161e:	4294      	cmp	r4, r2
 8001620:	d002      	beq.n	8001628 <std+0x48>
 8001622:	33d0      	adds	r3, #208	; 0xd0
 8001624:	429c      	cmp	r4, r3
 8001626:	d105      	bne.n	8001634 <std+0x54>
 8001628:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800162c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001630:	f000 ba44 	b.w	8001abc <__retarget_lock_init_recursive>
 8001634:	bd10      	pop	{r4, pc}
 8001636:	bf00      	nop
 8001638:	0800181d 	.word	0x0800181d
 800163c:	0800183f 	.word	0x0800183f
 8001640:	08001877 	.word	0x08001877
 8001644:	0800189b 	.word	0x0800189b
 8001648:	2000008c 	.word	0x2000008c

0800164c <stdio_exit_handler>:
 800164c:	4a02      	ldr	r2, [pc, #8]	; (8001658 <stdio_exit_handler+0xc>)
 800164e:	4903      	ldr	r1, [pc, #12]	; (800165c <stdio_exit_handler+0x10>)
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <stdio_exit_handler+0x14>)
 8001652:	f000 b869 	b.w	8001728 <_fwalk_sglue>
 8001656:	bf00      	nop
 8001658:	2000000c 	.word	0x2000000c
 800165c:	08001db1 	.word	0x08001db1
 8001660:	20000018 	.word	0x20000018

08001664 <cleanup_stdio>:
 8001664:	6841      	ldr	r1, [r0, #4]
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <cleanup_stdio+0x34>)
 8001668:	b510      	push	{r4, lr}
 800166a:	4299      	cmp	r1, r3
 800166c:	4604      	mov	r4, r0
 800166e:	d001      	beq.n	8001674 <cleanup_stdio+0x10>
 8001670:	f000 fb9e 	bl	8001db0 <_fflush_r>
 8001674:	68a1      	ldr	r1, [r4, #8]
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <cleanup_stdio+0x38>)
 8001678:	4299      	cmp	r1, r3
 800167a:	d002      	beq.n	8001682 <cleanup_stdio+0x1e>
 800167c:	4620      	mov	r0, r4
 800167e:	f000 fb97 	bl	8001db0 <_fflush_r>
 8001682:	68e1      	ldr	r1, [r4, #12]
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <cleanup_stdio+0x3c>)
 8001686:	4299      	cmp	r1, r3
 8001688:	d004      	beq.n	8001694 <cleanup_stdio+0x30>
 800168a:	4620      	mov	r0, r4
 800168c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001690:	f000 bb8e 	b.w	8001db0 <_fflush_r>
 8001694:	bd10      	pop	{r4, pc}
 8001696:	bf00      	nop
 8001698:	2000008c 	.word	0x2000008c
 800169c:	200000f4 	.word	0x200000f4
 80016a0:	2000015c 	.word	0x2000015c

080016a4 <global_stdio_init.part.0>:
 80016a4:	b510      	push	{r4, lr}
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <global_stdio_init.part.0+0x30>)
 80016a8:	4c0b      	ldr	r4, [pc, #44]	; (80016d8 <global_stdio_init.part.0+0x34>)
 80016aa:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <global_stdio_init.part.0+0x38>)
 80016ac:	4620      	mov	r0, r4
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	2104      	movs	r1, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	f7ff ff94 	bl	80015e0 <std>
 80016b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80016bc:	2201      	movs	r2, #1
 80016be:	2109      	movs	r1, #9
 80016c0:	f7ff ff8e 	bl	80015e0 <std>
 80016c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80016c8:	2202      	movs	r2, #2
 80016ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016ce:	2112      	movs	r1, #18
 80016d0:	f7ff bf86 	b.w	80015e0 <std>
 80016d4:	200001c4 	.word	0x200001c4
 80016d8:	2000008c 	.word	0x2000008c
 80016dc:	0800164d 	.word	0x0800164d

080016e0 <__sfp_lock_acquire>:
 80016e0:	4801      	ldr	r0, [pc, #4]	; (80016e8 <__sfp_lock_acquire+0x8>)
 80016e2:	f000 b9ec 	b.w	8001abe <__retarget_lock_acquire_recursive>
 80016e6:	bf00      	nop
 80016e8:	200001cd 	.word	0x200001cd

080016ec <__sfp_lock_release>:
 80016ec:	4801      	ldr	r0, [pc, #4]	; (80016f4 <__sfp_lock_release+0x8>)
 80016ee:	f000 b9e7 	b.w	8001ac0 <__retarget_lock_release_recursive>
 80016f2:	bf00      	nop
 80016f4:	200001cd 	.word	0x200001cd

080016f8 <__sinit>:
 80016f8:	b510      	push	{r4, lr}
 80016fa:	4604      	mov	r4, r0
 80016fc:	f7ff fff0 	bl	80016e0 <__sfp_lock_acquire>
 8001700:	6a23      	ldr	r3, [r4, #32]
 8001702:	b11b      	cbz	r3, 800170c <__sinit+0x14>
 8001704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001708:	f7ff bff0 	b.w	80016ec <__sfp_lock_release>
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__sinit+0x28>)
 800170e:	6223      	str	r3, [r4, #32]
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__sinit+0x2c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f5      	bne.n	8001704 <__sinit+0xc>
 8001718:	f7ff ffc4 	bl	80016a4 <global_stdio_init.part.0>
 800171c:	e7f2      	b.n	8001704 <__sinit+0xc>
 800171e:	bf00      	nop
 8001720:	08001665 	.word	0x08001665
 8001724:	200001c4 	.word	0x200001c4

08001728 <_fwalk_sglue>:
 8001728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800172c:	4607      	mov	r7, r0
 800172e:	4688      	mov	r8, r1
 8001730:	4614      	mov	r4, r2
 8001732:	2600      	movs	r6, #0
 8001734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001738:	f1b9 0901 	subs.w	r9, r9, #1
 800173c:	d505      	bpl.n	800174a <_fwalk_sglue+0x22>
 800173e:	6824      	ldr	r4, [r4, #0]
 8001740:	2c00      	cmp	r4, #0
 8001742:	d1f7      	bne.n	8001734 <_fwalk_sglue+0xc>
 8001744:	4630      	mov	r0, r6
 8001746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800174a:	89ab      	ldrh	r3, [r5, #12]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d907      	bls.n	8001760 <_fwalk_sglue+0x38>
 8001750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001754:	3301      	adds	r3, #1
 8001756:	d003      	beq.n	8001760 <_fwalk_sglue+0x38>
 8001758:	4629      	mov	r1, r5
 800175a:	4638      	mov	r0, r7
 800175c:	47c0      	blx	r8
 800175e:	4306      	orrs	r6, r0
 8001760:	3568      	adds	r5, #104	; 0x68
 8001762:	e7e9      	b.n	8001738 <_fwalk_sglue+0x10>

08001764 <_puts_r>:
 8001764:	6a03      	ldr	r3, [r0, #32]
 8001766:	b570      	push	{r4, r5, r6, lr}
 8001768:	4605      	mov	r5, r0
 800176a:	460e      	mov	r6, r1
 800176c:	6884      	ldr	r4, [r0, #8]
 800176e:	b90b      	cbnz	r3, 8001774 <_puts_r+0x10>
 8001770:	f7ff ffc2 	bl	80016f8 <__sinit>
 8001774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001776:	07db      	lsls	r3, r3, #31
 8001778:	d405      	bmi.n	8001786 <_puts_r+0x22>
 800177a:	89a3      	ldrh	r3, [r4, #12]
 800177c:	0598      	lsls	r0, r3, #22
 800177e:	d402      	bmi.n	8001786 <_puts_r+0x22>
 8001780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001782:	f000 f99c 	bl	8001abe <__retarget_lock_acquire_recursive>
 8001786:	89a3      	ldrh	r3, [r4, #12]
 8001788:	0719      	lsls	r1, r3, #28
 800178a:	d513      	bpl.n	80017b4 <_puts_r+0x50>
 800178c:	6923      	ldr	r3, [r4, #16]
 800178e:	b18b      	cbz	r3, 80017b4 <_puts_r+0x50>
 8001790:	3e01      	subs	r6, #1
 8001792:	68a3      	ldr	r3, [r4, #8]
 8001794:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001798:	3b01      	subs	r3, #1
 800179a:	60a3      	str	r3, [r4, #8]
 800179c:	b9e9      	cbnz	r1, 80017da <_puts_r+0x76>
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da2e      	bge.n	8001800 <_puts_r+0x9c>
 80017a2:	4622      	mov	r2, r4
 80017a4:	210a      	movs	r1, #10
 80017a6:	4628      	mov	r0, r5
 80017a8:	f000 f87b 	bl	80018a2 <__swbuf_r>
 80017ac:	3001      	adds	r0, #1
 80017ae:	d007      	beq.n	80017c0 <_puts_r+0x5c>
 80017b0:	250a      	movs	r5, #10
 80017b2:	e007      	b.n	80017c4 <_puts_r+0x60>
 80017b4:	4621      	mov	r1, r4
 80017b6:	4628      	mov	r0, r5
 80017b8:	f000 f8b0 	bl	800191c <__swsetup_r>
 80017bc:	2800      	cmp	r0, #0
 80017be:	d0e7      	beq.n	8001790 <_puts_r+0x2c>
 80017c0:	f04f 35ff 	mov.w	r5, #4294967295
 80017c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017c6:	07da      	lsls	r2, r3, #31
 80017c8:	d405      	bmi.n	80017d6 <_puts_r+0x72>
 80017ca:	89a3      	ldrh	r3, [r4, #12]
 80017cc:	059b      	lsls	r3, r3, #22
 80017ce:	d402      	bmi.n	80017d6 <_puts_r+0x72>
 80017d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017d2:	f000 f975 	bl	8001ac0 <__retarget_lock_release_recursive>
 80017d6:	4628      	mov	r0, r5
 80017d8:	bd70      	pop	{r4, r5, r6, pc}
 80017da:	2b00      	cmp	r3, #0
 80017dc:	da04      	bge.n	80017e8 <_puts_r+0x84>
 80017de:	69a2      	ldr	r2, [r4, #24]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dc06      	bgt.n	80017f2 <_puts_r+0x8e>
 80017e4:	290a      	cmp	r1, #10
 80017e6:	d004      	beq.n	80017f2 <_puts_r+0x8e>
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	6022      	str	r2, [r4, #0]
 80017ee:	7019      	strb	r1, [r3, #0]
 80017f0:	e7cf      	b.n	8001792 <_puts_r+0x2e>
 80017f2:	4622      	mov	r2, r4
 80017f4:	4628      	mov	r0, r5
 80017f6:	f000 f854 	bl	80018a2 <__swbuf_r>
 80017fa:	3001      	adds	r0, #1
 80017fc:	d1c9      	bne.n	8001792 <_puts_r+0x2e>
 80017fe:	e7df      	b.n	80017c0 <_puts_r+0x5c>
 8001800:	250a      	movs	r5, #10
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	6022      	str	r2, [r4, #0]
 8001808:	701d      	strb	r5, [r3, #0]
 800180a:	e7db      	b.n	80017c4 <_puts_r+0x60>

0800180c <puts>:
 800180c:	4b02      	ldr	r3, [pc, #8]	; (8001818 <puts+0xc>)
 800180e:	4601      	mov	r1, r0
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	f7ff bfa7 	b.w	8001764 <_puts_r>
 8001816:	bf00      	nop
 8001818:	20000064 	.word	0x20000064

0800181c <__sread>:
 800181c:	b510      	push	{r4, lr}
 800181e:	460c      	mov	r4, r1
 8001820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001824:	f000 f8fc 	bl	8001a20 <_read_r>
 8001828:	2800      	cmp	r0, #0
 800182a:	bfab      	itete	ge
 800182c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800182e:	89a3      	ldrhlt	r3, [r4, #12]
 8001830:	181b      	addge	r3, r3, r0
 8001832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001836:	bfac      	ite	ge
 8001838:	6563      	strge	r3, [r4, #84]	; 0x54
 800183a:	81a3      	strhlt	r3, [r4, #12]
 800183c:	bd10      	pop	{r4, pc}

0800183e <__swrite>:
 800183e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001842:	461f      	mov	r7, r3
 8001844:	898b      	ldrh	r3, [r1, #12]
 8001846:	4605      	mov	r5, r0
 8001848:	05db      	lsls	r3, r3, #23
 800184a:	460c      	mov	r4, r1
 800184c:	4616      	mov	r6, r2
 800184e:	d505      	bpl.n	800185c <__swrite+0x1e>
 8001850:	2302      	movs	r3, #2
 8001852:	2200      	movs	r2, #0
 8001854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001858:	f000 f8d0 	bl	80019fc <_lseek_r>
 800185c:	89a3      	ldrh	r3, [r4, #12]
 800185e:	4632      	mov	r2, r6
 8001860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001864:	81a3      	strh	r3, [r4, #12]
 8001866:	4628      	mov	r0, r5
 8001868:	463b      	mov	r3, r7
 800186a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800186e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001872:	f000 b8e7 	b.w	8001a44 <_write_r>

08001876 <__sseek>:
 8001876:	b510      	push	{r4, lr}
 8001878:	460c      	mov	r4, r1
 800187a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800187e:	f000 f8bd 	bl	80019fc <_lseek_r>
 8001882:	1c43      	adds	r3, r0, #1
 8001884:	89a3      	ldrh	r3, [r4, #12]
 8001886:	bf15      	itete	ne
 8001888:	6560      	strne	r0, [r4, #84]	; 0x54
 800188a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800188e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001892:	81a3      	strheq	r3, [r4, #12]
 8001894:	bf18      	it	ne
 8001896:	81a3      	strhne	r3, [r4, #12]
 8001898:	bd10      	pop	{r4, pc}

0800189a <__sclose>:
 800189a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800189e:	f000 b89d 	b.w	80019dc <_close_r>

080018a2 <__swbuf_r>:
 80018a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a4:	460e      	mov	r6, r1
 80018a6:	4614      	mov	r4, r2
 80018a8:	4605      	mov	r5, r0
 80018aa:	b118      	cbz	r0, 80018b4 <__swbuf_r+0x12>
 80018ac:	6a03      	ldr	r3, [r0, #32]
 80018ae:	b90b      	cbnz	r3, 80018b4 <__swbuf_r+0x12>
 80018b0:	f7ff ff22 	bl	80016f8 <__sinit>
 80018b4:	69a3      	ldr	r3, [r4, #24]
 80018b6:	60a3      	str	r3, [r4, #8]
 80018b8:	89a3      	ldrh	r3, [r4, #12]
 80018ba:	071a      	lsls	r2, r3, #28
 80018bc:	d525      	bpl.n	800190a <__swbuf_r+0x68>
 80018be:	6923      	ldr	r3, [r4, #16]
 80018c0:	b31b      	cbz	r3, 800190a <__swbuf_r+0x68>
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	6922      	ldr	r2, [r4, #16]
 80018c6:	b2f6      	uxtb	r6, r6
 80018c8:	1a98      	subs	r0, r3, r2
 80018ca:	6963      	ldr	r3, [r4, #20]
 80018cc:	4637      	mov	r7, r6
 80018ce:	4283      	cmp	r3, r0
 80018d0:	dc04      	bgt.n	80018dc <__swbuf_r+0x3a>
 80018d2:	4621      	mov	r1, r4
 80018d4:	4628      	mov	r0, r5
 80018d6:	f000 fa6b 	bl	8001db0 <_fflush_r>
 80018da:	b9e0      	cbnz	r0, 8001916 <__swbuf_r+0x74>
 80018dc:	68a3      	ldr	r3, [r4, #8]
 80018de:	3b01      	subs	r3, #1
 80018e0:	60a3      	str	r3, [r4, #8]
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	6022      	str	r2, [r4, #0]
 80018e8:	701e      	strb	r6, [r3, #0]
 80018ea:	6962      	ldr	r2, [r4, #20]
 80018ec:	1c43      	adds	r3, r0, #1
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d004      	beq.n	80018fc <__swbuf_r+0x5a>
 80018f2:	89a3      	ldrh	r3, [r4, #12]
 80018f4:	07db      	lsls	r3, r3, #31
 80018f6:	d506      	bpl.n	8001906 <__swbuf_r+0x64>
 80018f8:	2e0a      	cmp	r6, #10
 80018fa:	d104      	bne.n	8001906 <__swbuf_r+0x64>
 80018fc:	4621      	mov	r1, r4
 80018fe:	4628      	mov	r0, r5
 8001900:	f000 fa56 	bl	8001db0 <_fflush_r>
 8001904:	b938      	cbnz	r0, 8001916 <__swbuf_r+0x74>
 8001906:	4638      	mov	r0, r7
 8001908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800190a:	4621      	mov	r1, r4
 800190c:	4628      	mov	r0, r5
 800190e:	f000 f805 	bl	800191c <__swsetup_r>
 8001912:	2800      	cmp	r0, #0
 8001914:	d0d5      	beq.n	80018c2 <__swbuf_r+0x20>
 8001916:	f04f 37ff 	mov.w	r7, #4294967295
 800191a:	e7f4      	b.n	8001906 <__swbuf_r+0x64>

0800191c <__swsetup_r>:
 800191c:	b538      	push	{r3, r4, r5, lr}
 800191e:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <__swsetup_r+0xac>)
 8001920:	4605      	mov	r5, r0
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	460c      	mov	r4, r1
 8001926:	b118      	cbz	r0, 8001930 <__swsetup_r+0x14>
 8001928:	6a03      	ldr	r3, [r0, #32]
 800192a:	b90b      	cbnz	r3, 8001930 <__swsetup_r+0x14>
 800192c:	f7ff fee4 	bl	80016f8 <__sinit>
 8001930:	89a3      	ldrh	r3, [r4, #12]
 8001932:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001936:	0718      	lsls	r0, r3, #28
 8001938:	d422      	bmi.n	8001980 <__swsetup_r+0x64>
 800193a:	06d9      	lsls	r1, r3, #27
 800193c:	d407      	bmi.n	800194e <__swsetup_r+0x32>
 800193e:	2309      	movs	r3, #9
 8001940:	602b      	str	r3, [r5, #0]
 8001942:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001946:	f04f 30ff 	mov.w	r0, #4294967295
 800194a:	81a3      	strh	r3, [r4, #12]
 800194c:	e034      	b.n	80019b8 <__swsetup_r+0x9c>
 800194e:	0758      	lsls	r0, r3, #29
 8001950:	d512      	bpl.n	8001978 <__swsetup_r+0x5c>
 8001952:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001954:	b141      	cbz	r1, 8001968 <__swsetup_r+0x4c>
 8001956:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800195a:	4299      	cmp	r1, r3
 800195c:	d002      	beq.n	8001964 <__swsetup_r+0x48>
 800195e:	4628      	mov	r0, r5
 8001960:	f000 f8b0 	bl	8001ac4 <_free_r>
 8001964:	2300      	movs	r3, #0
 8001966:	6363      	str	r3, [r4, #52]	; 0x34
 8001968:	89a3      	ldrh	r3, [r4, #12]
 800196a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800196e:	81a3      	strh	r3, [r4, #12]
 8001970:	2300      	movs	r3, #0
 8001972:	6063      	str	r3, [r4, #4]
 8001974:	6923      	ldr	r3, [r4, #16]
 8001976:	6023      	str	r3, [r4, #0]
 8001978:	89a3      	ldrh	r3, [r4, #12]
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	81a3      	strh	r3, [r4, #12]
 8001980:	6923      	ldr	r3, [r4, #16]
 8001982:	b94b      	cbnz	r3, 8001998 <__swsetup_r+0x7c>
 8001984:	89a3      	ldrh	r3, [r4, #12]
 8001986:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800198a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800198e:	d003      	beq.n	8001998 <__swsetup_r+0x7c>
 8001990:	4621      	mov	r1, r4
 8001992:	4628      	mov	r0, r5
 8001994:	f000 fa59 	bl	8001e4a <__smakebuf_r>
 8001998:	89a0      	ldrh	r0, [r4, #12]
 800199a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800199e:	f010 0301 	ands.w	r3, r0, #1
 80019a2:	d00a      	beq.n	80019ba <__swsetup_r+0x9e>
 80019a4:	2300      	movs	r3, #0
 80019a6:	60a3      	str	r3, [r4, #8]
 80019a8:	6963      	ldr	r3, [r4, #20]
 80019aa:	425b      	negs	r3, r3
 80019ac:	61a3      	str	r3, [r4, #24]
 80019ae:	6923      	ldr	r3, [r4, #16]
 80019b0:	b943      	cbnz	r3, 80019c4 <__swsetup_r+0xa8>
 80019b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80019b6:	d1c4      	bne.n	8001942 <__swsetup_r+0x26>
 80019b8:	bd38      	pop	{r3, r4, r5, pc}
 80019ba:	0781      	lsls	r1, r0, #30
 80019bc:	bf58      	it	pl
 80019be:	6963      	ldrpl	r3, [r4, #20]
 80019c0:	60a3      	str	r3, [r4, #8]
 80019c2:	e7f4      	b.n	80019ae <__swsetup_r+0x92>
 80019c4:	2000      	movs	r0, #0
 80019c6:	e7f7      	b.n	80019b8 <__swsetup_r+0x9c>
 80019c8:	20000064 	.word	0x20000064

080019cc <memset>:
 80019cc:	4603      	mov	r3, r0
 80019ce:	4402      	add	r2, r0
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d100      	bne.n	80019d6 <memset+0xa>
 80019d4:	4770      	bx	lr
 80019d6:	f803 1b01 	strb.w	r1, [r3], #1
 80019da:	e7f9      	b.n	80019d0 <memset+0x4>

080019dc <_close_r>:
 80019dc:	b538      	push	{r3, r4, r5, lr}
 80019de:	2300      	movs	r3, #0
 80019e0:	4d05      	ldr	r5, [pc, #20]	; (80019f8 <_close_r+0x1c>)
 80019e2:	4604      	mov	r4, r0
 80019e4:	4608      	mov	r0, r1
 80019e6:	602b      	str	r3, [r5, #0]
 80019e8:	f7fe fe94 	bl	8000714 <_close>
 80019ec:	1c43      	adds	r3, r0, #1
 80019ee:	d102      	bne.n	80019f6 <_close_r+0x1a>
 80019f0:	682b      	ldr	r3, [r5, #0]
 80019f2:	b103      	cbz	r3, 80019f6 <_close_r+0x1a>
 80019f4:	6023      	str	r3, [r4, #0]
 80019f6:	bd38      	pop	{r3, r4, r5, pc}
 80019f8:	200001c8 	.word	0x200001c8

080019fc <_lseek_r>:
 80019fc:	b538      	push	{r3, r4, r5, lr}
 80019fe:	4604      	mov	r4, r0
 8001a00:	4608      	mov	r0, r1
 8001a02:	4611      	mov	r1, r2
 8001a04:	2200      	movs	r2, #0
 8001a06:	4d05      	ldr	r5, [pc, #20]	; (8001a1c <_lseek_r+0x20>)
 8001a08:	602a      	str	r2, [r5, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f7fe fea6 	bl	800075c <_lseek>
 8001a10:	1c43      	adds	r3, r0, #1
 8001a12:	d102      	bne.n	8001a1a <_lseek_r+0x1e>
 8001a14:	682b      	ldr	r3, [r5, #0]
 8001a16:	b103      	cbz	r3, 8001a1a <_lseek_r+0x1e>
 8001a18:	6023      	str	r3, [r4, #0]
 8001a1a:	bd38      	pop	{r3, r4, r5, pc}
 8001a1c:	200001c8 	.word	0x200001c8

08001a20 <_read_r>:
 8001a20:	b538      	push	{r3, r4, r5, lr}
 8001a22:	4604      	mov	r4, r0
 8001a24:	4608      	mov	r0, r1
 8001a26:	4611      	mov	r1, r2
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4d05      	ldr	r5, [pc, #20]	; (8001a40 <_read_r+0x20>)
 8001a2c:	602a      	str	r2, [r5, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	f7fe fe37 	bl	80006a2 <_read>
 8001a34:	1c43      	adds	r3, r0, #1
 8001a36:	d102      	bne.n	8001a3e <_read_r+0x1e>
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	b103      	cbz	r3, 8001a3e <_read_r+0x1e>
 8001a3c:	6023      	str	r3, [r4, #0]
 8001a3e:	bd38      	pop	{r3, r4, r5, pc}
 8001a40:	200001c8 	.word	0x200001c8

08001a44 <_write_r>:
 8001a44:	b538      	push	{r3, r4, r5, lr}
 8001a46:	4604      	mov	r4, r0
 8001a48:	4608      	mov	r0, r1
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4d05      	ldr	r5, [pc, #20]	; (8001a64 <_write_r+0x20>)
 8001a50:	602a      	str	r2, [r5, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	f7fe fe42 	bl	80006dc <_write>
 8001a58:	1c43      	adds	r3, r0, #1
 8001a5a:	d102      	bne.n	8001a62 <_write_r+0x1e>
 8001a5c:	682b      	ldr	r3, [r5, #0]
 8001a5e:	b103      	cbz	r3, 8001a62 <_write_r+0x1e>
 8001a60:	6023      	str	r3, [r4, #0]
 8001a62:	bd38      	pop	{r3, r4, r5, pc}
 8001a64:	200001c8 	.word	0x200001c8

08001a68 <__errno>:
 8001a68:	4b01      	ldr	r3, [pc, #4]	; (8001a70 <__errno+0x8>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000064 	.word	0x20000064

08001a74 <__libc_init_array>:
 8001a74:	b570      	push	{r4, r5, r6, lr}
 8001a76:	2600      	movs	r6, #0
 8001a78:	4d0c      	ldr	r5, [pc, #48]	; (8001aac <__libc_init_array+0x38>)
 8001a7a:	4c0d      	ldr	r4, [pc, #52]	; (8001ab0 <__libc_init_array+0x3c>)
 8001a7c:	1b64      	subs	r4, r4, r5
 8001a7e:	10a4      	asrs	r4, r4, #2
 8001a80:	42a6      	cmp	r6, r4
 8001a82:	d109      	bne.n	8001a98 <__libc_init_array+0x24>
 8001a84:	f000 fa50 	bl	8001f28 <_init>
 8001a88:	2600      	movs	r6, #0
 8001a8a:	4d0a      	ldr	r5, [pc, #40]	; (8001ab4 <__libc_init_array+0x40>)
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	; (8001ab8 <__libc_init_array+0x44>)
 8001a8e:	1b64      	subs	r4, r4, r5
 8001a90:	10a4      	asrs	r4, r4, #2
 8001a92:	42a6      	cmp	r6, r4
 8001a94:	d105      	bne.n	8001aa2 <__libc_init_array+0x2e>
 8001a96:	bd70      	pop	{r4, r5, r6, pc}
 8001a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a9c:	4798      	blx	r3
 8001a9e:	3601      	adds	r6, #1
 8001aa0:	e7ee      	b.n	8001a80 <__libc_init_array+0xc>
 8001aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aa6:	4798      	blx	r3
 8001aa8:	3601      	adds	r6, #1
 8001aaa:	e7f2      	b.n	8001a92 <__libc_init_array+0x1e>
 8001aac:	08001f70 	.word	0x08001f70
 8001ab0:	08001f70 	.word	0x08001f70
 8001ab4:	08001f70 	.word	0x08001f70
 8001ab8:	08001f74 	.word	0x08001f74

08001abc <__retarget_lock_init_recursive>:
 8001abc:	4770      	bx	lr

08001abe <__retarget_lock_acquire_recursive>:
 8001abe:	4770      	bx	lr

08001ac0 <__retarget_lock_release_recursive>:
 8001ac0:	4770      	bx	lr
	...

08001ac4 <_free_r>:
 8001ac4:	b538      	push	{r3, r4, r5, lr}
 8001ac6:	4605      	mov	r5, r0
 8001ac8:	2900      	cmp	r1, #0
 8001aca:	d040      	beq.n	8001b4e <_free_r+0x8a>
 8001acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ad0:	1f0c      	subs	r4, r1, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bfb8      	it	lt
 8001ad6:	18e4      	addlt	r4, r4, r3
 8001ad8:	f000 f8dc 	bl	8001c94 <__malloc_lock>
 8001adc:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <_free_r+0x8c>)
 8001ade:	6813      	ldr	r3, [r2, #0]
 8001ae0:	b933      	cbnz	r3, 8001af0 <_free_r+0x2c>
 8001ae2:	6063      	str	r3, [r4, #4]
 8001ae4:	6014      	str	r4, [r2, #0]
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001aec:	f000 b8d8 	b.w	8001ca0 <__malloc_unlock>
 8001af0:	42a3      	cmp	r3, r4
 8001af2:	d908      	bls.n	8001b06 <_free_r+0x42>
 8001af4:	6820      	ldr	r0, [r4, #0]
 8001af6:	1821      	adds	r1, r4, r0
 8001af8:	428b      	cmp	r3, r1
 8001afa:	bf01      	itttt	eq
 8001afc:	6819      	ldreq	r1, [r3, #0]
 8001afe:	685b      	ldreq	r3, [r3, #4]
 8001b00:	1809      	addeq	r1, r1, r0
 8001b02:	6021      	streq	r1, [r4, #0]
 8001b04:	e7ed      	b.n	8001ae2 <_free_r+0x1e>
 8001b06:	461a      	mov	r2, r3
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	b10b      	cbz	r3, 8001b10 <_free_r+0x4c>
 8001b0c:	42a3      	cmp	r3, r4
 8001b0e:	d9fa      	bls.n	8001b06 <_free_r+0x42>
 8001b10:	6811      	ldr	r1, [r2, #0]
 8001b12:	1850      	adds	r0, r2, r1
 8001b14:	42a0      	cmp	r0, r4
 8001b16:	d10b      	bne.n	8001b30 <_free_r+0x6c>
 8001b18:	6820      	ldr	r0, [r4, #0]
 8001b1a:	4401      	add	r1, r0
 8001b1c:	1850      	adds	r0, r2, r1
 8001b1e:	4283      	cmp	r3, r0
 8001b20:	6011      	str	r1, [r2, #0]
 8001b22:	d1e0      	bne.n	8001ae6 <_free_r+0x22>
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4408      	add	r0, r1
 8001b2a:	6010      	str	r0, [r2, #0]
 8001b2c:	6053      	str	r3, [r2, #4]
 8001b2e:	e7da      	b.n	8001ae6 <_free_r+0x22>
 8001b30:	d902      	bls.n	8001b38 <_free_r+0x74>
 8001b32:	230c      	movs	r3, #12
 8001b34:	602b      	str	r3, [r5, #0]
 8001b36:	e7d6      	b.n	8001ae6 <_free_r+0x22>
 8001b38:	6820      	ldr	r0, [r4, #0]
 8001b3a:	1821      	adds	r1, r4, r0
 8001b3c:	428b      	cmp	r3, r1
 8001b3e:	bf01      	itttt	eq
 8001b40:	6819      	ldreq	r1, [r3, #0]
 8001b42:	685b      	ldreq	r3, [r3, #4]
 8001b44:	1809      	addeq	r1, r1, r0
 8001b46:	6021      	streq	r1, [r4, #0]
 8001b48:	6063      	str	r3, [r4, #4]
 8001b4a:	6054      	str	r4, [r2, #4]
 8001b4c:	e7cb      	b.n	8001ae6 <_free_r+0x22>
 8001b4e:	bd38      	pop	{r3, r4, r5, pc}
 8001b50:	200001d0 	.word	0x200001d0

08001b54 <sbrk_aligned>:
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	4e0e      	ldr	r6, [pc, #56]	; (8001b90 <sbrk_aligned+0x3c>)
 8001b58:	460c      	mov	r4, r1
 8001b5a:	6831      	ldr	r1, [r6, #0]
 8001b5c:	4605      	mov	r5, r0
 8001b5e:	b911      	cbnz	r1, 8001b66 <sbrk_aligned+0x12>
 8001b60:	f000 f9d2 	bl	8001f08 <_sbrk_r>
 8001b64:	6030      	str	r0, [r6, #0]
 8001b66:	4621      	mov	r1, r4
 8001b68:	4628      	mov	r0, r5
 8001b6a:	f000 f9cd 	bl	8001f08 <_sbrk_r>
 8001b6e:	1c43      	adds	r3, r0, #1
 8001b70:	d00a      	beq.n	8001b88 <sbrk_aligned+0x34>
 8001b72:	1cc4      	adds	r4, r0, #3
 8001b74:	f024 0403 	bic.w	r4, r4, #3
 8001b78:	42a0      	cmp	r0, r4
 8001b7a:	d007      	beq.n	8001b8c <sbrk_aligned+0x38>
 8001b7c:	1a21      	subs	r1, r4, r0
 8001b7e:	4628      	mov	r0, r5
 8001b80:	f000 f9c2 	bl	8001f08 <_sbrk_r>
 8001b84:	3001      	adds	r0, #1
 8001b86:	d101      	bne.n	8001b8c <sbrk_aligned+0x38>
 8001b88:	f04f 34ff 	mov.w	r4, #4294967295
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
 8001b90:	200001d4 	.word	0x200001d4

08001b94 <_malloc_r>:
 8001b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b98:	1ccd      	adds	r5, r1, #3
 8001b9a:	f025 0503 	bic.w	r5, r5, #3
 8001b9e:	3508      	adds	r5, #8
 8001ba0:	2d0c      	cmp	r5, #12
 8001ba2:	bf38      	it	cc
 8001ba4:	250c      	movcc	r5, #12
 8001ba6:	2d00      	cmp	r5, #0
 8001ba8:	4607      	mov	r7, r0
 8001baa:	db01      	blt.n	8001bb0 <_malloc_r+0x1c>
 8001bac:	42a9      	cmp	r1, r5
 8001bae:	d905      	bls.n	8001bbc <_malloc_r+0x28>
 8001bb0:	230c      	movs	r3, #12
 8001bb2:	2600      	movs	r6, #0
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4630      	mov	r0, r6
 8001bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001c90 <_malloc_r+0xfc>
 8001bc0:	f000 f868 	bl	8001c94 <__malloc_lock>
 8001bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8001bc8:	461c      	mov	r4, r3
 8001bca:	bb5c      	cbnz	r4, 8001c24 <_malloc_r+0x90>
 8001bcc:	4629      	mov	r1, r5
 8001bce:	4638      	mov	r0, r7
 8001bd0:	f7ff ffc0 	bl	8001b54 <sbrk_aligned>
 8001bd4:	1c43      	adds	r3, r0, #1
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	d155      	bne.n	8001c86 <_malloc_r+0xf2>
 8001bda:	f8d8 4000 	ldr.w	r4, [r8]
 8001bde:	4626      	mov	r6, r4
 8001be0:	2e00      	cmp	r6, #0
 8001be2:	d145      	bne.n	8001c70 <_malloc_r+0xdc>
 8001be4:	2c00      	cmp	r4, #0
 8001be6:	d048      	beq.n	8001c7a <_malloc_r+0xe6>
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	4631      	mov	r1, r6
 8001bec:	4638      	mov	r0, r7
 8001bee:	eb04 0903 	add.w	r9, r4, r3
 8001bf2:	f000 f989 	bl	8001f08 <_sbrk_r>
 8001bf6:	4581      	cmp	r9, r0
 8001bf8:	d13f      	bne.n	8001c7a <_malloc_r+0xe6>
 8001bfa:	6821      	ldr	r1, [r4, #0]
 8001bfc:	4638      	mov	r0, r7
 8001bfe:	1a6d      	subs	r5, r5, r1
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7ff ffa7 	bl	8001b54 <sbrk_aligned>
 8001c06:	3001      	adds	r0, #1
 8001c08:	d037      	beq.n	8001c7a <_malloc_r+0xe6>
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	442b      	add	r3, r5
 8001c0e:	6023      	str	r3, [r4, #0]
 8001c10:	f8d8 3000 	ldr.w	r3, [r8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d038      	beq.n	8001c8a <_malloc_r+0xf6>
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	42a2      	cmp	r2, r4
 8001c1c:	d12b      	bne.n	8001c76 <_malloc_r+0xe2>
 8001c1e:	2200      	movs	r2, #0
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	e00f      	b.n	8001c44 <_malloc_r+0xb0>
 8001c24:	6822      	ldr	r2, [r4, #0]
 8001c26:	1b52      	subs	r2, r2, r5
 8001c28:	d41f      	bmi.n	8001c6a <_malloc_r+0xd6>
 8001c2a:	2a0b      	cmp	r2, #11
 8001c2c:	d917      	bls.n	8001c5e <_malloc_r+0xca>
 8001c2e:	1961      	adds	r1, r4, r5
 8001c30:	42a3      	cmp	r3, r4
 8001c32:	6025      	str	r5, [r4, #0]
 8001c34:	bf18      	it	ne
 8001c36:	6059      	strne	r1, [r3, #4]
 8001c38:	6863      	ldr	r3, [r4, #4]
 8001c3a:	bf08      	it	eq
 8001c3c:	f8c8 1000 	streq.w	r1, [r8]
 8001c40:	5162      	str	r2, [r4, r5]
 8001c42:	604b      	str	r3, [r1, #4]
 8001c44:	4638      	mov	r0, r7
 8001c46:	f104 060b 	add.w	r6, r4, #11
 8001c4a:	f000 f829 	bl	8001ca0 <__malloc_unlock>
 8001c4e:	f026 0607 	bic.w	r6, r6, #7
 8001c52:	1d23      	adds	r3, r4, #4
 8001c54:	1af2      	subs	r2, r6, r3
 8001c56:	d0ae      	beq.n	8001bb6 <_malloc_r+0x22>
 8001c58:	1b9b      	subs	r3, r3, r6
 8001c5a:	50a3      	str	r3, [r4, r2]
 8001c5c:	e7ab      	b.n	8001bb6 <_malloc_r+0x22>
 8001c5e:	42a3      	cmp	r3, r4
 8001c60:	6862      	ldr	r2, [r4, #4]
 8001c62:	d1dd      	bne.n	8001c20 <_malloc_r+0x8c>
 8001c64:	f8c8 2000 	str.w	r2, [r8]
 8001c68:	e7ec      	b.n	8001c44 <_malloc_r+0xb0>
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	6864      	ldr	r4, [r4, #4]
 8001c6e:	e7ac      	b.n	8001bca <_malloc_r+0x36>
 8001c70:	4634      	mov	r4, r6
 8001c72:	6876      	ldr	r6, [r6, #4]
 8001c74:	e7b4      	b.n	8001be0 <_malloc_r+0x4c>
 8001c76:	4613      	mov	r3, r2
 8001c78:	e7cc      	b.n	8001c14 <_malloc_r+0x80>
 8001c7a:	230c      	movs	r3, #12
 8001c7c:	4638      	mov	r0, r7
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	f000 f80e 	bl	8001ca0 <__malloc_unlock>
 8001c84:	e797      	b.n	8001bb6 <_malloc_r+0x22>
 8001c86:	6025      	str	r5, [r4, #0]
 8001c88:	e7dc      	b.n	8001c44 <_malloc_r+0xb0>
 8001c8a:	605b      	str	r3, [r3, #4]
 8001c8c:	deff      	udf	#255	; 0xff
 8001c8e:	bf00      	nop
 8001c90:	200001d0 	.word	0x200001d0

08001c94 <__malloc_lock>:
 8001c94:	4801      	ldr	r0, [pc, #4]	; (8001c9c <__malloc_lock+0x8>)
 8001c96:	f7ff bf12 	b.w	8001abe <__retarget_lock_acquire_recursive>
 8001c9a:	bf00      	nop
 8001c9c:	200001cc 	.word	0x200001cc

08001ca0 <__malloc_unlock>:
 8001ca0:	4801      	ldr	r0, [pc, #4]	; (8001ca8 <__malloc_unlock+0x8>)
 8001ca2:	f7ff bf0d 	b.w	8001ac0 <__retarget_lock_release_recursive>
 8001ca6:	bf00      	nop
 8001ca8:	200001cc 	.word	0x200001cc

08001cac <__sflush_r>:
 8001cac:	898a      	ldrh	r2, [r1, #12]
 8001cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb0:	4605      	mov	r5, r0
 8001cb2:	0710      	lsls	r0, r2, #28
 8001cb4:	460c      	mov	r4, r1
 8001cb6:	d457      	bmi.n	8001d68 <__sflush_r+0xbc>
 8001cb8:	684b      	ldr	r3, [r1, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	dc04      	bgt.n	8001cc8 <__sflush_r+0x1c>
 8001cbe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	dc01      	bgt.n	8001cc8 <__sflush_r+0x1c>
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cca:	2e00      	cmp	r6, #0
 8001ccc:	d0fa      	beq.n	8001cc4 <__sflush_r+0x18>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001cd4:	682f      	ldr	r7, [r5, #0]
 8001cd6:	6a21      	ldr	r1, [r4, #32]
 8001cd8:	602b      	str	r3, [r5, #0]
 8001cda:	d032      	beq.n	8001d42 <__sflush_r+0x96>
 8001cdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cde:	89a3      	ldrh	r3, [r4, #12]
 8001ce0:	075a      	lsls	r2, r3, #29
 8001ce2:	d505      	bpl.n	8001cf0 <__sflush_r+0x44>
 8001ce4:	6863      	ldr	r3, [r4, #4]
 8001ce6:	1ac0      	subs	r0, r0, r3
 8001ce8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cea:	b10b      	cbz	r3, 8001cf0 <__sflush_r+0x44>
 8001cec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cee:	1ac0      	subs	r0, r0, r3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	6a21      	ldr	r1, [r4, #32]
 8001cfa:	47b0      	blx	r6
 8001cfc:	1c43      	adds	r3, r0, #1
 8001cfe:	89a3      	ldrh	r3, [r4, #12]
 8001d00:	d106      	bne.n	8001d10 <__sflush_r+0x64>
 8001d02:	6829      	ldr	r1, [r5, #0]
 8001d04:	291d      	cmp	r1, #29
 8001d06:	d82b      	bhi.n	8001d60 <__sflush_r+0xb4>
 8001d08:	4a28      	ldr	r2, [pc, #160]	; (8001dac <__sflush_r+0x100>)
 8001d0a:	410a      	asrs	r2, r1
 8001d0c:	07d6      	lsls	r6, r2, #31
 8001d0e:	d427      	bmi.n	8001d60 <__sflush_r+0xb4>
 8001d10:	2200      	movs	r2, #0
 8001d12:	6062      	str	r2, [r4, #4]
 8001d14:	6922      	ldr	r2, [r4, #16]
 8001d16:	04d9      	lsls	r1, r3, #19
 8001d18:	6022      	str	r2, [r4, #0]
 8001d1a:	d504      	bpl.n	8001d26 <__sflush_r+0x7a>
 8001d1c:	1c42      	adds	r2, r0, #1
 8001d1e:	d101      	bne.n	8001d24 <__sflush_r+0x78>
 8001d20:	682b      	ldr	r3, [r5, #0]
 8001d22:	b903      	cbnz	r3, 8001d26 <__sflush_r+0x7a>
 8001d24:	6560      	str	r0, [r4, #84]	; 0x54
 8001d26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d28:	602f      	str	r7, [r5, #0]
 8001d2a:	2900      	cmp	r1, #0
 8001d2c:	d0ca      	beq.n	8001cc4 <__sflush_r+0x18>
 8001d2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d32:	4299      	cmp	r1, r3
 8001d34:	d002      	beq.n	8001d3c <__sflush_r+0x90>
 8001d36:	4628      	mov	r0, r5
 8001d38:	f7ff fec4 	bl	8001ac4 <_free_r>
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	6360      	str	r0, [r4, #52]	; 0x34
 8001d40:	e7c1      	b.n	8001cc6 <__sflush_r+0x1a>
 8001d42:	2301      	movs	r3, #1
 8001d44:	4628      	mov	r0, r5
 8001d46:	47b0      	blx	r6
 8001d48:	1c41      	adds	r1, r0, #1
 8001d4a:	d1c8      	bne.n	8001cde <__sflush_r+0x32>
 8001d4c:	682b      	ldr	r3, [r5, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0c5      	beq.n	8001cde <__sflush_r+0x32>
 8001d52:	2b1d      	cmp	r3, #29
 8001d54:	d001      	beq.n	8001d5a <__sflush_r+0xae>
 8001d56:	2b16      	cmp	r3, #22
 8001d58:	d101      	bne.n	8001d5e <__sflush_r+0xb2>
 8001d5a:	602f      	str	r7, [r5, #0]
 8001d5c:	e7b2      	b.n	8001cc4 <__sflush_r+0x18>
 8001d5e:	89a3      	ldrh	r3, [r4, #12]
 8001d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d64:	81a3      	strh	r3, [r4, #12]
 8001d66:	e7ae      	b.n	8001cc6 <__sflush_r+0x1a>
 8001d68:	690f      	ldr	r7, [r1, #16]
 8001d6a:	2f00      	cmp	r7, #0
 8001d6c:	d0aa      	beq.n	8001cc4 <__sflush_r+0x18>
 8001d6e:	0793      	lsls	r3, r2, #30
 8001d70:	bf18      	it	ne
 8001d72:	2300      	movne	r3, #0
 8001d74:	680e      	ldr	r6, [r1, #0]
 8001d76:	bf08      	it	eq
 8001d78:	694b      	ldreq	r3, [r1, #20]
 8001d7a:	1bf6      	subs	r6, r6, r7
 8001d7c:	600f      	str	r7, [r1, #0]
 8001d7e:	608b      	str	r3, [r1, #8]
 8001d80:	2e00      	cmp	r6, #0
 8001d82:	dd9f      	ble.n	8001cc4 <__sflush_r+0x18>
 8001d84:	4633      	mov	r3, r6
 8001d86:	463a      	mov	r2, r7
 8001d88:	4628      	mov	r0, r5
 8001d8a:	6a21      	ldr	r1, [r4, #32]
 8001d8c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001d90:	47e0      	blx	ip
 8001d92:	2800      	cmp	r0, #0
 8001d94:	dc06      	bgt.n	8001da4 <__sflush_r+0xf8>
 8001d96:	89a3      	ldrh	r3, [r4, #12]
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da0:	81a3      	strh	r3, [r4, #12]
 8001da2:	e790      	b.n	8001cc6 <__sflush_r+0x1a>
 8001da4:	4407      	add	r7, r0
 8001da6:	1a36      	subs	r6, r6, r0
 8001da8:	e7ea      	b.n	8001d80 <__sflush_r+0xd4>
 8001daa:	bf00      	nop
 8001dac:	dfbffffe 	.word	0xdfbffffe

08001db0 <_fflush_r>:
 8001db0:	b538      	push	{r3, r4, r5, lr}
 8001db2:	690b      	ldr	r3, [r1, #16]
 8001db4:	4605      	mov	r5, r0
 8001db6:	460c      	mov	r4, r1
 8001db8:	b913      	cbnz	r3, 8001dc0 <_fflush_r+0x10>
 8001dba:	2500      	movs	r5, #0
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	bd38      	pop	{r3, r4, r5, pc}
 8001dc0:	b118      	cbz	r0, 8001dca <_fflush_r+0x1a>
 8001dc2:	6a03      	ldr	r3, [r0, #32]
 8001dc4:	b90b      	cbnz	r3, 8001dca <_fflush_r+0x1a>
 8001dc6:	f7ff fc97 	bl	80016f8 <__sinit>
 8001dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f3      	beq.n	8001dba <_fflush_r+0xa>
 8001dd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001dd4:	07d0      	lsls	r0, r2, #31
 8001dd6:	d404      	bmi.n	8001de2 <_fflush_r+0x32>
 8001dd8:	0599      	lsls	r1, r3, #22
 8001dda:	d402      	bmi.n	8001de2 <_fflush_r+0x32>
 8001ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dde:	f7ff fe6e 	bl	8001abe <__retarget_lock_acquire_recursive>
 8001de2:	4628      	mov	r0, r5
 8001de4:	4621      	mov	r1, r4
 8001de6:	f7ff ff61 	bl	8001cac <__sflush_r>
 8001dea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dec:	4605      	mov	r5, r0
 8001dee:	07da      	lsls	r2, r3, #31
 8001df0:	d4e4      	bmi.n	8001dbc <_fflush_r+0xc>
 8001df2:	89a3      	ldrh	r3, [r4, #12]
 8001df4:	059b      	lsls	r3, r3, #22
 8001df6:	d4e1      	bmi.n	8001dbc <_fflush_r+0xc>
 8001df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dfa:	f7ff fe61 	bl	8001ac0 <__retarget_lock_release_recursive>
 8001dfe:	e7dd      	b.n	8001dbc <_fflush_r+0xc>

08001e00 <__swhatbuf_r>:
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	460c      	mov	r4, r1
 8001e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e08:	4615      	mov	r5, r2
 8001e0a:	2900      	cmp	r1, #0
 8001e0c:	461e      	mov	r6, r3
 8001e0e:	b096      	sub	sp, #88	; 0x58
 8001e10:	da0c      	bge.n	8001e2c <__swhatbuf_r+0x2c>
 8001e12:	89a3      	ldrh	r3, [r4, #12]
 8001e14:	2100      	movs	r1, #0
 8001e16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e1a:	bf0c      	ite	eq
 8001e1c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001e20:	2340      	movne	r3, #64	; 0x40
 8001e22:	2000      	movs	r0, #0
 8001e24:	6031      	str	r1, [r6, #0]
 8001e26:	602b      	str	r3, [r5, #0]
 8001e28:	b016      	add	sp, #88	; 0x58
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
 8001e2c:	466a      	mov	r2, sp
 8001e2e:	f000 f849 	bl	8001ec4 <_fstat_r>
 8001e32:	2800      	cmp	r0, #0
 8001e34:	dbed      	blt.n	8001e12 <__swhatbuf_r+0x12>
 8001e36:	9901      	ldr	r1, [sp, #4]
 8001e38:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001e3c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001e40:	4259      	negs	r1, r3
 8001e42:	4159      	adcs	r1, r3
 8001e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e48:	e7eb      	b.n	8001e22 <__swhatbuf_r+0x22>

08001e4a <__smakebuf_r>:
 8001e4a:	898b      	ldrh	r3, [r1, #12]
 8001e4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e4e:	079d      	lsls	r5, r3, #30
 8001e50:	4606      	mov	r6, r0
 8001e52:	460c      	mov	r4, r1
 8001e54:	d507      	bpl.n	8001e66 <__smakebuf_r+0x1c>
 8001e56:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e5a:	6023      	str	r3, [r4, #0]
 8001e5c:	6123      	str	r3, [r4, #16]
 8001e5e:	2301      	movs	r3, #1
 8001e60:	6163      	str	r3, [r4, #20]
 8001e62:	b002      	add	sp, #8
 8001e64:	bd70      	pop	{r4, r5, r6, pc}
 8001e66:	466a      	mov	r2, sp
 8001e68:	ab01      	add	r3, sp, #4
 8001e6a:	f7ff ffc9 	bl	8001e00 <__swhatbuf_r>
 8001e6e:	9900      	ldr	r1, [sp, #0]
 8001e70:	4605      	mov	r5, r0
 8001e72:	4630      	mov	r0, r6
 8001e74:	f7ff fe8e 	bl	8001b94 <_malloc_r>
 8001e78:	b948      	cbnz	r0, 8001e8e <__smakebuf_r+0x44>
 8001e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e7e:	059a      	lsls	r2, r3, #22
 8001e80:	d4ef      	bmi.n	8001e62 <__smakebuf_r+0x18>
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	f043 0302 	orr.w	r3, r3, #2
 8001e8a:	81a3      	strh	r3, [r4, #12]
 8001e8c:	e7e3      	b.n	8001e56 <__smakebuf_r+0xc>
 8001e8e:	89a3      	ldrh	r3, [r4, #12]
 8001e90:	6020      	str	r0, [r4, #0]
 8001e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e96:	81a3      	strh	r3, [r4, #12]
 8001e98:	9b00      	ldr	r3, [sp, #0]
 8001e9a:	6120      	str	r0, [r4, #16]
 8001e9c:	6163      	str	r3, [r4, #20]
 8001e9e:	9b01      	ldr	r3, [sp, #4]
 8001ea0:	b15b      	cbz	r3, 8001eba <__smakebuf_r+0x70>
 8001ea2:	4630      	mov	r0, r6
 8001ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ea8:	f000 f81e 	bl	8001ee8 <_isatty_r>
 8001eac:	b128      	cbz	r0, 8001eba <__smakebuf_r+0x70>
 8001eae:	89a3      	ldrh	r3, [r4, #12]
 8001eb0:	f023 0303 	bic.w	r3, r3, #3
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	81a3      	strh	r3, [r4, #12]
 8001eba:	89a3      	ldrh	r3, [r4, #12]
 8001ebc:	431d      	orrs	r5, r3
 8001ebe:	81a5      	strh	r5, [r4, #12]
 8001ec0:	e7cf      	b.n	8001e62 <__smakebuf_r+0x18>
	...

08001ec4 <_fstat_r>:
 8001ec4:	b538      	push	{r3, r4, r5, lr}
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	4d06      	ldr	r5, [pc, #24]	; (8001ee4 <_fstat_r+0x20>)
 8001eca:	4604      	mov	r4, r0
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	602b      	str	r3, [r5, #0]
 8001ed2:	f7fe fc2a 	bl	800072a <_fstat>
 8001ed6:	1c43      	adds	r3, r0, #1
 8001ed8:	d102      	bne.n	8001ee0 <_fstat_r+0x1c>
 8001eda:	682b      	ldr	r3, [r5, #0]
 8001edc:	b103      	cbz	r3, 8001ee0 <_fstat_r+0x1c>
 8001ede:	6023      	str	r3, [r4, #0]
 8001ee0:	bd38      	pop	{r3, r4, r5, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200001c8 	.word	0x200001c8

08001ee8 <_isatty_r>:
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	2300      	movs	r3, #0
 8001eec:	4d05      	ldr	r5, [pc, #20]	; (8001f04 <_isatty_r+0x1c>)
 8001eee:	4604      	mov	r4, r0
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	602b      	str	r3, [r5, #0]
 8001ef4:	f7fe fc28 	bl	8000748 <_isatty>
 8001ef8:	1c43      	adds	r3, r0, #1
 8001efa:	d102      	bne.n	8001f02 <_isatty_r+0x1a>
 8001efc:	682b      	ldr	r3, [r5, #0]
 8001efe:	b103      	cbz	r3, 8001f02 <_isatty_r+0x1a>
 8001f00:	6023      	str	r3, [r4, #0]
 8001f02:	bd38      	pop	{r3, r4, r5, pc}
 8001f04:	200001c8 	.word	0x200001c8

08001f08 <_sbrk_r>:
 8001f08:	b538      	push	{r3, r4, r5, lr}
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	4d05      	ldr	r5, [pc, #20]	; (8001f24 <_sbrk_r+0x1c>)
 8001f0e:	4604      	mov	r4, r0
 8001f10:	4608      	mov	r0, r1
 8001f12:	602b      	str	r3, [r5, #0]
 8001f14:	f7fe fc2e 	bl	8000774 <_sbrk>
 8001f18:	1c43      	adds	r3, r0, #1
 8001f1a:	d102      	bne.n	8001f22 <_sbrk_r+0x1a>
 8001f1c:	682b      	ldr	r3, [r5, #0]
 8001f1e:	b103      	cbz	r3, 8001f22 <_sbrk_r+0x1a>
 8001f20:	6023      	str	r3, [r4, #0]
 8001f22:	bd38      	pop	{r3, r4, r5, pc}
 8001f24:	200001c8 	.word	0x200001c8

08001f28 <_init>:
 8001f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2a:	bf00      	nop
 8001f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f2e:	bc08      	pop	{r3}
 8001f30:	469e      	mov	lr, r3
 8001f32:	4770      	bx	lr

08001f34 <_fini>:
 8001f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f36:	bf00      	nop
 8001f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f3a:	bc08      	pop	{r3}
 8001f3c:	469e      	mov	lr, r3
 8001f3e:	4770      	bx	lr
